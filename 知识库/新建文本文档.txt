页面渲染
1>在index.wxml文件中使用，写在data里面，然后用{{}}写入对应的名字即可
2>如：
在index.js文件中
let arr1 = [
  'Matt', 'Moly', 'Joe', 'Hurly'
];
let arr2 = [
  {id: Math.random(), name:"Matt"},
  {id: Math.random(), name:"Moly"},
  {id: Math.random(), name:"Joe"},
  {id: Math.random(), name:"Hurly"},
];
Page({

  data: {
    name:"Domesy",
    people:{
      n1:1111,
      n2:222
    },
    names:arr1,
    names2:arr2
  },
}）
b.在index.wxml中
<!-- 页面使用在index.js中写在data里面，然后用{{}}写入对应的名字即可 -->
  <!-- <view>{{name}}</view>
  <view>{{people.n1}}</view>
  <view>{{people.n2}}</view> -->

  <!-- 可以进行简单的逻辑用算 -->
  <!-- <view>n1+n2: {{people.n2 + people.n1}}</view>
  <view>n1>n2: {{people.n2 < people.n1}}</view> -->

  <!-- 循环渲染：wx:for {{names}} 而且必须使用key 进行比较 *this代表渲染names的数组元素-->
  <!-- item代表每次渲染可以用字符串 -->
  <!-- <view wx:for="{{names}}" wx:key="*this">
    {{item}}
  </view>  -->

  <!-- 获取多个列表 -->
  <view wx:for="{{names2}}" wx:key="id">
    {{item.name}}
  </view>
3>注
a.在循环时，必须要使用wx：key，这样可以标识，
b.*this,表示数组里的元素值
c.item代表所存在的name的元素

条件渲染
<view
    wx:if="{{socre > 70 && socre < 90}}"
  >
    等级B
  </view>
  <!-- <view
    wx:elif="{{socre<70 && socre>30}}"
  >
    等级C
  </view>
  <view
    wx:elif="{{socre<30}}"
  >
  等级D
  </view>
  <view
    wx:else="{{socre>90}}"
  >
    等级A
  </view> -->
  
  <!-- block:辅助的模块，并不会渲染，只是在判断条件上平级的情况下使用 -->
  <block 
    wx:if="{{socre===80}}"
  >
    <view>{{name}}</view>
    <view>{{socre}}</view>
    <view>等级</view>
  </block>
  <block 
    wx:else
  >
    学生不符合要求
  </block>

wxs辅助渲染
1>两种方式可以写在index.wxml文件中
使用wsx标签， 用 module 写上对应的名字，写入方法
引用的时候直接写入函数名即可
如：
<wxs module="tool">
  function createNames(names){
    return names.split(',');
  }
  
  module.exports = createNames;
</wxs>

  <view
    wx:for="{{tool(names)}}"
  >
  {{item}}
  </view>
注：此处的names是index.js所定义的名字，同时names也对应。
2>单独写一个wxs文件，写入方式与上述一致，注意不能使用ES6语法，只能使用var
function createNames(names){
  <!-- 注意这里并不支持ES6语法，所以不能用let -->
  var arr = names.split(',')
  return arr;
}

module.exports = createNames;
引用：
<wxs src="tool.wxs" module="tool"></wxs>